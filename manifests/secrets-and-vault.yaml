# SecretProviderClass integrates HashiCorp Vault with Kubernetes Secrets via CSI provider.
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: vault-secrets
  namespace: dev
spec:
  provider: vault
  secretObjects:
    - secretName: postgres-app-secret
      type: Opaque
      data:
        - objectName: postgres-username
          key: username
        - objectName: postgres-password
          key: password
  parameters:
    vaultAddress: "https://vault.example.com:8200"
    roleName: "k8s-dev-role"
    objects: |
      - objectName: postgres-username
        secretPath: database/creds/dev-app
        secretKey: username
      - objectName: postgres-password
        secretPath: database/creds/dev-app
        secretKey: password
---
# CSI driver Pod to sync Vault secrets into Kubernetes Secret for workloads that cannot mount CSI volumes.
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sync-vault-secrets
  namespace: dev
spec:
  schedule: "*/15 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: vault-sync
          containers:
            - name: vault-sync
              image: ghcr.io/onedr0p/kubernetes-tools:1.28.2
              command:
                - /bin/bash
                - -c
                - |
                  set -euo pipefail
                  SECRET_JSON=$(curl -sfS -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/database/creds/dev-app")
                  USER=$(echo "$SECRET_JSON" | jq -r '.data.username // .data.data.username')
                  PASS=$(echo "$SECRET_JSON" | jq -r '.data.password // .data.data.password')
                  for NS in dev platform; do
                    kubectl create secret generic postgres-app-secret --namespace "$NS" --dry-run=client \
                      --from-literal=username="$USER" --from-literal=password="$PASS" -o yaml | kubectl apply -f -
                  done
              env:
                - name: VAULT_ADDR
                  value: https://vault.example.com:8200
                - name: VAULT_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: vault-agent-token
                      key: token
              securityContext:
                runAsUser: 65532
                runAsNonRoot: true
                allowPrivilegeEscalation: false
          restartPolicy: OnFailure
---
apiVersion: v1
kind: Secret
metadata:
  name: vault-agent-token
  namespace: dev
type: Opaque
stringData:
  token: hvac_example_token
---
# Placeholder secret for environments without Vault integration (use sealed secrets or external KMS).
apiVersion: v1
kind: Secret
metadata:
  name: postgres-app-secret
  namespace: dev
type: Opaque
stringData:
  username: dbuser
  password: strongpassword123!
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-app-secret
  namespace: platform
type: Opaque
stringData:
  username: dbuser
  password: strongpassword123!
---
apiVersion: v1
kind: Secret
metadata:
  name: influxdb-admin
  namespace: platform
type: Opaque
stringData:
  username: influxadmin
  password: changeMe!Secure
  token: influx-super-secret-token
