# Cilium configuration ConfigMap enabling eBPF datapath and encryption (installed via Helm chart).
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-values
  namespace: kube-system
  labels:
    app.kubernetes.io/name: cilium
    app.kubernetes.io/managed-by: helm
    tier: networking
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "0"
data:
  values.yaml: |
    encryption:
      enabled: true
      type: wireguard
    kubeProxyReplacement: strict
    hubble:
      enabled: true
      relay:
        enabled: true
      ui:
        enabled: true
    ipam:
      mode: kubernetes
    k8sServiceHost: k8s-control-plane.internal
    k8sServicePort: 6443
    rollOutCiliumPods: true
    securityContext:
      privileged: false
    prometheus:
      enabled: false
    operator:
      replicas: 2
    ipv4NativeRoutingCIDR: 10.244.0.0/16
---
# Namespace dedicated to ingress controller components.
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-system
  labels:
    pod-security.kubernetes.io/enforce: baseline
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-nginx
  namespace: ingress-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ingress-nginx
rules:
  - apiGroups: [""]
    resources: ["configmaps", "endpoints", "nodes", "pods", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch", "update"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses", "ingressclasses"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-nginx
subjects:
  - kind: ServiceAccount
    name: ingress-nginx
    namespace: ingress-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-nginx-controller
  namespace: ingress-system
  labels:
    app.kubernetes.io/name: ingress-nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
    spec:
      serviceAccountName: ingress-nginx
      containers:
        - name: controller
          image: registry.k8s.io/ingress-nginx/controller:v1.9.4
          args:
            - "/nginx-ingress-controller"
            - "--publish-service=$(POD_NAMESPACE)/ingress-nginx-controller"
            - "--election-id=ingress-controller-leader"
            - "--ingress-class=nginx-ha"
            - "--enable-ssl-passthrough"
            - "--default-ssl-certificate=ingress-system/default-tls"
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            runAsUser: 101
            runAsGroup: 101
            runAsNonRoot: true
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
      nodeSelector:
        node-role.kubernetes.io/worker: ""
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          effect: NoSchedule
          operator: Exists
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
---
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-controller
  namespace: ingress-system
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb-ip
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-internal: "false"
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: ingress-nginx
  ports:
    - name: http
      port: 80
      targetPort: 80
    - name: https
      port: 443
      targetPort: 443
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx-ha
spec:
  controller: k8s.io/ingress-nginx
---
# ClusterIssuer to obtain TLS certificates from Let's Encrypt using cert-manager.
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-production
spec:
  acme:
    email: sre@example.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-production-account-key
    solvers:
      - http01:
          ingress:
            class: nginx-ha
---
# Default TLS secret placeholder for ingress. Replace with certificate once issued.
apiVersion: v1
kind: Secret
metadata:
  name: default-tls
  namespace: ingress-system
type: kubernetes.io/tls
stringData:
  tls.crt: |-
    -----BEGIN CERTIFICATE-----
    REPLACE_WITH_VALID_CERTIFICATE
    -----END CERTIFICATE-----
  tls.key: |-
    -----BEGIN PRIVATE KEY-----
    REPLACE_WITH_VALID_KEY
    -----END PRIVATE KEY-----
---
# NetworkPolicy to default deny all ingress/egress in dev namespace.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: dev
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
---
# NetworkPolicy to default deny in staging namespace.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: staging
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
---
# NetworkPolicy to default deny in prod namespace.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: prod
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
---
# Allow traffic only from ingress and same namespace for dev web application.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-web-from-ingress
  namespace: dev
spec:
  podSelector:
    matchLabels:
      app: web-frontend
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: ingress-system
        - podSelector:
            matchLabels:
              app: web-frontend
      ports:
        - port: 80
          protocol: TCP
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: dev
          podSelector:
            matchLabels:
              app: web-backend
      ports:
        - port: 5432
          protocol: TCP
  policyTypes:
    - Ingress
    - Egress
---
# Deny all traffic between environments (staging/prod) except via Istio mTLS.
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default-mtls
  namespace: istio-system
spec:
  mtls:
    mode: STRICT
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-istio-egress
  namespace: staging
spec:
  podSelector: {}
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              istio-injection: enabled
      ports:
        - port: 15443
          protocol: TCP
  policyTypes:
    - Egress
